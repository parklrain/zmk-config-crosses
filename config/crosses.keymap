#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_lshft {
            bindings = <&kp LSHFT>;
            key-positions = <13 12>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 11>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lalt {
            bindings = <&kp LALT>;
            key-positions = <11 10>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lgui {
            bindings = <&kp LWIN>;
            key-positions = <14 13>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lshft_lctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <11 13 12>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lctrl_lalt {
            bindings = <&kp LC(LALT)>;
            key-positions = <11 10 12>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lshft_lalt {
            bindings = <&kp LS(LALT)>;
            key-positions = <10 13 12>;
            layers = <0 1 2 3>;
            slow-release;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lctrl_lgui {
            bindings = <&kp LC(LWIN)>;
            key-positions = <10 13 12 11>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rshft {
            bindings = <&kp RSHFT>;
            key-positions = <16 17>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <17 18>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_ralt {
            bindings = <&kp LALT>;
            key-positions = <18 19>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rgui {
            bindings = <&kp RWIN>;
            key-positions = <15 16>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rshft_rctrl {
            bindings = <&kp RS(LCTRL)>;
            key-positions = <16 17 18>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rctrl_ralt {
            bindings = <&kp LC(LALT)>;
            key-positions = <19 18 17>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rshft_ralt {
            bindings = <&kp RS(LALT)>;
            key-positions = <16 17 19>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rctrl_rwin {
            bindings = <&kp LC(RWIN)>;
            key-positions = <16 17 18 19>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_kr_en {
            bindings = <&kp RALT>;
            key-positions = <16 18>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_hanja {
            bindings = <&kp RCTRL>;
            key-positions = <17 19>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_prev {
            bindings = <&mkp MB4>;
            key-positions = <16 26>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_next {
            bindings = <&mkp MB5>;
            key-positions = <17 27>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 21 22>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 21>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <26 27>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <28 26>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_mclk {
            bindings = <&mkp MCLK>;
            key-positions = <26 28 27>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_scroll {
            bindings = <&mo 1>;
            key-positions = <28 27>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_caps {
            bindings = <&kp CAPS>;
            key-positions = <11 13>;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <24 14>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <14 4>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <13 3>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_multiply {
            bindings = <&kp ASTRK>;
            key-positions = <12 2>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_divide {
            bindings = <&kp SLASH>;
            key-positions = <11 1>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <23 13>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lclk2 {
            bindings = <&mkp LCLK>;
            key-positions = <30 31>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rclk2 {
            bindings = <&mkp RCLK>;
            key-positions = <31 32>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_lclk3 {
            bindings = <&mkp LCLK>;
            key-positions = <34 33>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_rclk3 {
            bindings = <&mkp RCLK>;
            key-positions = <35 34>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_mclk2 {
            bindings = <&mkp MCLK>;
            key-positions = <25 15>;
            slow-release;
            layers = <0 1 2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E      &kp R        &kp T        &kp Y        &kp U            &kp I      &kp O    &kp P
&kp A  &kp S  &kp D      &kp F        &kp G        &kp H        &kp J            &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C      &kp V        &kp B        &kp N        &kp M            &kp COMMA  &kp DOT  &kp FSLH
              &lt 1 ESC  &lt 2 SPACE  &lt 3 TAB    &lt 1 ENTER  &lt 2 BACKSPACE  &lt 3 DEL
            >;

            label = "QWER";
        };

        scroll_layer {
            bindings = <
&kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &kp PLUS   &kp F7  &kp F8     &kp F9  &kp F12
&kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL    &kp MINUS  &kp F4  &kp F5     &kp F6  &kp F11
&kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &kp ASTRK  &kp F1  &kp F2     &kp F3  &kp F10
                   &kp DOT  &kp N0  &kp MINUS    &trans     &trans  &kp SLASH
            >;

            label = "SCROLL";
        };

        snipe_layer {
            bindings = <
&kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC     &mkp MCLK  &kp HOME   &none      &kp END    &kp DEL
&kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS     &mkp MB4   &kp LEFT   &kp UP     &kp RIGHT  &kp PG_UP
&kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE     &mkp MB5   &mkp LCLK  &kp DOWN   &mkp RCLK  &kp PG_DN
                     &kp LPAR   &kp RPAR   &kp UNDER    &none      &none      &kp SPACE
            >;

            label = "SNIPE";
        };

        mouse_layer {
            bindings = <
&kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp INS    &kp DEL      &mkp MCLK  &kp HOME   &none     &kp END    &kp DEL
&kp LC(A)        &kp LC(S)       &none            &none      &none        &mkp MB4   &kp LEFT   &kp UP    &kp RIGHT  &kp PG_UP
&kp LC(Z)        &kp LC(X)       &kp LC(C)        &kp LC(V)  &kp LC(Y)    &mkp MB5   &mkp LCLK  &kp DOWN  &mkp RCLK  &kp PG_DN
                                 &mkp LCLK        &mkp RCLK  &mkp MCLK    &trans     &trans     &trans
            >;

            label = "MSE";
        };

        system_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR  &bt BT_CLR_ALL  &out OUT_BLE  &out OUT_USB  &out OUT_TOG
&trans        &trans        &trans        &trans        &trans          &trans      &trans          &trans        &bootloader   &sys_reset
&trans        &trans        &trans        &trans        &trans          &trans      &trans          &trans        &trans        &trans
                            &trans        &trans        &trans          &trans      &trans          &trans
            >;

            label = "SYS";
        };

        /* layer_2 {
            bindings = <
&none  &none   &none    &none   &none         &none         &kp N1         &none         &none     &none  &none   &to 0
&none  &none   &none    &none   &none         &none         &none         &none          &rgb_ug RGB_BRD &rgb_ug RGB_BRI  &rgb_ug RGB_EFF   &rgb_ug RGB_TOG
&none  &none   &none    &none   &none         &none         &none         &mkp LCLK     &mkp RCLK  &none  &none   &none
&none  &none   &none    &none   &bt BT_NXT  &bt BT_CLR    &none         &none         &none     &none  &none   &none
                                   &none         &none         &none         &none         &none
                                                 &none         &none         &none
            >;
       
            
        };

       Mouse {
            bindings = <
&none        &none         &none         &none         &none      &none         &none       &none      &none         &none         &none         &none
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &none      &bt BT_CLR    &bt BT_CLR  &none      &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none
&none        &trans        &trans        &mkp MCLK     &trans     &none         &none       &trans     &mkp MCLK     &trans        &trans        &none
&bootloader  &trans        &mkp RCLK     &mo 4         &mkp LCLK  &mo 5         &mo 5       &mkp LCLK  &mo 4         &mkp RCLK     &trans        &bootloader
                                         &mo 5         &mkp LCLK  &mkp RCLK     &mkp RCLK   &mkp LCLK
                                                       &none      &trans        &trans
            >;

            
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &mkp MCLK  &trans     &trans       &trans     &trans     &mkp MCLK  &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &trans     &mkp LCLK  &trans       &trans     &mkp LCLK  &trans     &mkp RCLK  &trans  &trans
                           &trans     &mkp LCLK  &mkp RCLK    &mkp RCLK  &mkp LCLK
                                      &trans     &trans       &trans
            >;
                
                
               
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &mkp MCLK  &trans     &trans       &trans     &trans     &mkp MCLK  &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &trans     &mkp LCLK  &trans       &trans     &mkp LCLK  &trans     &mkp RCLK  &trans  &trans
                           &trans     &mkp LCLK  &mkp RCLK    &mkp RCLK  &mkp LCLK
                                      &trans     &trans       &trans
            >;
                
                
        };*/
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sys_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};
